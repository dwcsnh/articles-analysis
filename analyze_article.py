import os
import json
from openai import OpenAI
from pydantic import BaseModel
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup as bs
import time

load_dotenv()

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36',
}
requests.packages.urllib3.disable_warnings()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def read_file(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

company_dictionary = read_file("dictionary_companies.csv")
sector_dictionary = read_file("dictionary_sectors.csv")

class Company(BaseModel):
    company_name: str
    company_stock_id: str

class Sector(BaseModel):
    id: str
    article: str
    sector: str
    companies: list[Company]

class SectorList:
    sectors: list[Sector]

class CompanyResult:
    def __init__(self, name, stockId):
        self.company_name = name
        self.company_stock_id = stockId

class SectorResult:
    def __init__(self, id, article, sector, companies):
        self.id = id
        self.article = article
        self.sector = sector
        self.companies = companies

def convert_company(c: Company) -> CompanyResult:
    return CompanyResult(name=c.company_name, stockId=c.company_stock_id)

def convert_sector(s: Sector) -> SectorResult:
    company_results = [convert_company(c) for c in s.companies]
    return SectorResult(
        id=s.id,
        article=s.article,
        sector=s.sector,
        companies=company_results
    )
        
def sector_result_to_dict(sr: SectorResult):
    return {
        "id": sr.id,
        "article": sr.article,
        "sector": sr.sector,
        "companies": [
            {
                "company_name": c.company_name,
                "company_stock_id": c.company_stock_id
            }
            for c in sr.companies
        ]
    }

# Output
results: list[SectorResult] = []

article_id = 1
for i in range(1, 4):  # Crawl 3 trang
    print(f"\n========== Crawling page {i} ==========")
    page_url = f"https://vneconomy.vn/chung-khoan.htm?trang={i}"
    try:
        response = requests.get(page_url, headers=HEADERS, verify=False, timeout=10)
        response.raise_for_status()
        soup = bs(response.content, 'html.parser')
        threads = soup.find_all('article', class_='story story--featured story--timeline')

        for thrd in threads:
            try:
                title = thrd.find('h3').text.strip()
                link = thrd.find('figure').find('a')['href']
                if not link.startswith('http'):
                    link = 'https://vneconomy.vn' + link

                article_response = requests.get(link, headers=HEADERS, verify=False, timeout=10)
                article_response.raise_for_status()
                article_soup = bs(article_response.content, 'html.parser')

                content_div = article_soup.find('div', class_='detail__content')
                if content_div:
                    paragraphs = content_div.find_all('p')
                    content_text = "\n".join([p.get_text(separator=' ', strip=True) for p in paragraphs])
                else:
                    content_text = "N·ªôi dung kh√¥ng t√¨m th·∫•y"

                print(f"üìÑ ƒêang ph√¢n t√≠ch b√†i b√°o: {title[:50]}...")

                article_content = f"id,title,content\n{article_id},{title},{content_text}"

                # G·ªçi OpenAI ƒë·ªÉ ph√¢n t√≠ch
                response = client.responses.parse(
                    model="gpt-4o",
                    input=[
                        {
                            "role": "system",
                            "content": """B·∫°n l√† m·ªôt chuy√™n gia tr√≠ch xu·∫•t d·ªØ li·ªáu c√≥ c·∫•u tr√∫c.

                            # Nhi·ªám v·ª•
                            Ph√¢n t√≠ch b√†i b√°o d·ª±a tr√™n 2 dictionary ƒë√£ cho (·ªü d·∫°ng CSV). ƒê·∫ßu ra l√† m·ªôt danh s√°ch c√°c object theo schema ƒë√£ cung c·∫•p.

                            # Input Format
                            L√† 1 file csv v·ªõi c√°c c·ªôt: id, title, content, t∆∞∆°ng ·ª©ng v·ªõi id, ti√™u ƒë·ªÅ v√† n·ªôi dung b√†i b√°o

                            # M√¥ t·∫£
                            - Ch·ªâ ra ng√†nh ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn ch·ªß y·∫øu trong danh s√°ch c√°c ng√†nh ƒë∆∞·ª£c cung c·∫•p trong Dictionary 2.
                            - T√¨m c√°c c√¥ng ty thu·ªôc ng√†nh ƒë√≥ ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn ·ªü trong b√†i b√°o, ƒë·ªìng th·ªùi c√≥ trong dictionary 1.
                            - M·ªôt ng√†nh c√≥ th·ªÉ ch·ª©a nhi·ªÅu c√¥ng ty.

                            # Output Format
                            L√† 1 json object, c√≥ d·∫°ng
                            {
                            id: t∆∞∆°ng ·ª©ng v·ªõi id c·ªßa input
                            article: t√™n b√†i b√°o,
                            sector: t√™n ng√†nh,
                            companies: [
                                { 
                                    company_name: t√™n c√¥ng ty, 
                                    company_stock_id: m√£ c·ªï phi·∫øu
                                }
                            ]
                            }
                            """
                        },
                        {
                            "role": "user",
                            "content": f"""# Dictionary 1 (STT,M√£ cp,T√™n ch√≠nh th·ª©c,Ng√†nh,T·ª´ kh√≥a)
                            {company_dictionary}

                            # Dictionary 2 (STT,Ng√†nh)
                            {sector_dictionary}

                            # B√†i b√°o
                            {article_content}
                            """
                        }
                    ],
                    text_format=Sector,
                )

                results.append(convert_sector(response.output_parsed))
                print(f"‚úÖ Ph√¢n t√≠ch xong b√†i b√°o {article_id}")
                print(f"‚úÖ Output: {response.output_parsed}")
                article_id += 1
                time.sleep(1.5)

            except Exception as e:
                print(f"‚ùå L·ªói x·ª≠ l√Ω b√†i b√°o: {e}")
                continue

    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω trang {i}: {e}")

results_as_dict = [sector_result_to_dict(sr) for sr in results]

with open('sectors_output.json', 'w', encoding='utf-8') as f:
    json.dump(results_as_dict, f, ensure_ascii=False, indent=4)
